#!/usr/bin/env bash
# GuardOS — Installer Scaffold (pre‑alpha, NON‑DESTRUCTIVE)
# ------------------------------------------------------------------
# Goals:
#  - Create a staged filesystem tree (./out/rootfs) that mirrors the
#    target layout described in guardos/installer/layout.txt
#  - Copy current repo tools into /opt/guardos
#  - Place profile and symlinks as they would appear on a real system
#  - NO PARTITIONING, NO MKFS, NO PRIVILEGED ACTIONS
#
# Usage:
#   bash guardos/installer/install.sh [--profile profiles/dev-test.yaml] [--out out/rootfs] [--force]
#
# After running, you can inspect ./out/rootfs to see the staged layout.
#
# Future (real install steps, not in this scaffold):
#  - Partition target disk, mkfs, mount
#  - rsync stage tree to target
#  - install bootloader (grub/syslinux/coreboot payload)
#  - generate initramfs, kernel params, users, etc.
# ------------------------------------------------------------------

set -euo pipefail

# ---------------- Defaults ----------------
REPO_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/../.." && pwd)"
PROFILE="$REPO_ROOT/profiles/minimal.yaml"
OUT_DIR="$REPO_ROOT/out/rootfs"
FORCE=false

# ---------------- Args --------------------
while [[ $# -gt 0 ]]; do
  case "$1" in
    --profile) PROFILE="${2:-}"; shift 2;;
    --out)     OUT_DIR="${2:-}"; shift 2;;
    --force)   FORCE=true; shift;;
    -h|--help)
      sed -n '1,60p' "$0" | sed 's/^# \{0,1\}//'
      exit 0;;
    *) echo "Unknown arg: $1" >&2; exit 1;;
  esac
done

# ---------------- Sanity ------------------
[[ -f "$PROFILE" ]] || { echo "Profile not found: $PROFILE" >&2; exit 1; }
[[ "$OUT_DIR" != "/" ]] || { echo "Refusing to stage to /" >&2; exit 1; }

step() { echo -e "\n==> $*"; }
note() { echo "    - $*"; }

confirm_if_exists() {
  local path="$1"
  if [[ -e "$path" && "$FORCE" != true ]]; then
    echo "Path exists: $path"
    read -r -p "Overwrite? [y/N]: " ans < /dev/tty || true
    [[ "${ans,,}" == "y" || "${ans,,}" == "yes" ]] || { echo "Aborted."; exit 1; }
  fi
}

# ---------------- Layout ------------------
create_tree() {
  step "Creating staged filesystem tree at: $OUT_DIR"
  confirm_if_exists "$OUT_DIR"
  rm -rf "$OUT_DIR"
  mkdir -p \
    "$OUT_DIR/boot/grub" \
    "$OUT_DIR/etc/guardos" \
    "$OUT_DIR/usr/bin" \
    "$OUT_DIR/var/log/guardos" \
    "$OUT_DIR/home/operator/Downloads" \
    "$OUT_DIR/home/operator/Models" \
    "$OUT_DIR/home/operator/.guardos" \
    "$OUT_DIR/opt/guardos/guardpanel" \
    "$OUT_DIR/opt/guardos/aegis" \
    "$OUT_DIR/opt/guardos/hunter" \
    "$OUT_DIR/opt/guardos/ai/models/cards" \
    "$OUT_DIR/opt/guardos/ai/policies" \
    "$OUT_DIR/opt/guardos/profiles" \
    "$OUT_DIR/dist"

  note "Base directories created."
}

copy_repo_payload() {
  step "Copying GuardOS payload into /opt/guardos"
  rsync -a --delete \
    "$REPO_ROOT/guardos/guardpanel/" "$OUT_DIR/opt/guardos/guardpanel/"
  rsync -a --delete \
    "$REPO_ROOT/guardos/aegis/" "$OUT_DIR/opt/guardos/aegis/"
  rsync -a --delete \
    "$REPO_ROOT/guardos/hunter/" "$OUT_DIR/opt/guardos/hunter/"

  # AI policies and models (no weights)
  install -m 0644 "$REPO_ROOT/ai/models/registry.yaml" "$OUT_DIR/opt/guardos/ai/models/registry.yaml"
  rsync -a --delete "$REPO_ROOT/ai/models/cards/" "$OUT_DIR/opt/guardos/ai/models/cards/"
  install -m 0644 "$REPO_ROOT/ai/policies/safety.yaml" "$OUT_DIR/opt/guardos/ai/policies/safety.yaml"
  install -m 0644 "$REPO_ROOT/ai/policies/tool_rules.yaml" "$OUT_DIR/opt/guardos/ai/policies/tool_rules.yaml"
  mkdir -p "$OUT_DIR/opt/guardos/ai/prompts/guardpanel"
  install -m 0644 "$REPO_ROOT/ai/prompts/guardpanel/base.md" "$OUT_DIR/opt/guardos/ai/prompts/guardpanel/base.md"
  install -m 0644 "$REPO_ROOT/ai/prompts/guardpanel/tools.json" "$OUT_DIR/opt/guardos/ai/prompts/guardpanel/tools.json"

  # Profiles
  rsync -a --delete "$REPO_ROOT/profiles/" "$OUT_DIR/opt/guardos/profiles/"

  note "Payload copied."
}

install_profile_and_links() {
  step "Installing active profile and convenience links"
  install -m 0644 "$PROFILE" "$OUT_DIR/etc/guardos/profile.yaml"

  # Symlink /usr/bin/guardpanel → /opt/guardos/guardpanel/cli.sh
  ln -sf "/opt/guardos/guardpanel/cli.sh" "$OUT_DIR/usr/bin/guardpanel"

  # Default operator env
  cat > "$OUT_DIR/home/operator/.guardos/ai.env" <<EOF
# Generated by GuardOS installer scaffold (pre‑alpha)
GUARDOS_AI_MODE=local
GUARDOS_MODEL_ID=gemma-0.27b-q4km
GUARDOS_POLICY_SAFETY=/opt/guardos/ai/policies/safety.yaml
GUARDOS_POLICY_TOOLS=/opt/guardos/ai/policies/tool_rules.yaml
GUARDOS_PROMPT_GUARDPANEL=/opt/guardos/ai/prompts/guardpanel/base.md
EOF

  note "Active profile placed at /etc/guardos/profile.yaml"
  note "Symlink created: /usr/bin/guardpanel"
  note "Operator env prepared at /home/operator/.guardos/ai.env"
}

place_boot_placeholders() {
  step "Placing boot placeholders (kernel/initrd not provided in pre‑alpha)"
  touch "$OUT_DIR/boot/vmlinuz" "$OUT_DIR/boot/initrd.img"
  note "Added placeholders /boot/vmlinuz and /boot/initrd.img"
  cat > "$OUT_DIR/boot/grub/grub.cfg" <<'EOF'
# GuardOS GRUB stub (pre‑alpha placeholder)
set default=0
set timeout=3

menuentry "GuardOS (stub)" {
  echo "This is a placeholder. Real GRUB config will be generated in a future milestone."
}
EOF
  note "GRUB stub written to /boot/grub/grub.cfg"
}

summary() {
  step "Staging complete"
  cat <<EOF
Staged at: $OUT_DIR

Key paths:
  /opt/guardos/guardpanel/cli.sh
  /opt/guardos/aegis/validate_config.sh
  /opt/guardos/hunter/detect_threats.sh
  /opt/guardos/ai/policies/*.yaml
  /opt/guardos/ai/models/registry.yaml
  /opt/guardos/ai/prompts/guardpanel/{base.md,tools.json}
  /opt/guardos/profiles/
  /etc/guardos/profile.yaml
  /usr/bin/guardpanel -> /opt/guardos/guardpanel/cli.sh

Next steps (future real installer):
  - Mount target filesystem
  - Rsync $OUT_DIR into target
  - Install bootloader and kernel
  - Create users, set permissions, generate initramfs
EOF
}

# ---------------- Run --------------------
create_tree
copy_repo_payload
install_profile_and_links
place_boot_placeholders
summary
